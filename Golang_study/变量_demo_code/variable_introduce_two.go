/*
model变量初始化:
对于声明变量时需要进行初始化的场景，var关键字可以保留，但不再是必要的元素，如下 所示：
 */

package main

import (
	"fmt"
	//查看数据类型的库
	"reflect"
)

func main(){

	var v1 int =10 //正确的使用方式1
	var v2 =10 //正确的使用方式2,编译器可以自动推到出v2的类型
	v3:= 10 //正确的使用方式3，编译器可以自动推导出v3的类型
	/*
	以上三种用法的效果是完全一样的。与第一种用法相比，
	第三种用法需要输入的字符数大大 减少，是懒程序员和聪明程序员的佳选择。
	这里Go语言也引入了另一个C和C++中没有的符号 （冒号和等号的组合:=），
	用于明确表达同时进行变量声明和初始化的工作。
	 */

	 /*
	 指定类型已不再是必需的，Go编译器可以从初始化表达式的右值推导出该变量应该声明为
	 哪种类型，这让Go语言看起来有点像动态类型语言，
	 尽管Go语言实际上是不折不扣的强类型语 言（静态类型语言）。
	  */

	  //当然，出现在:=左侧的变量不应该是已经被声明过的，否则会导致编译错误，比如下面这个写法：
	  //var i int
	  //不能重新声明（已声明过的，否则会报错)
	  //i := 2
	//fmt.Println(reflect.TypeOf(i ),i)

	fmt.Println(reflect.TypeOf(v1 ),v1)
	fmt.Println(reflect.TypeOf(v2 ),v2)
	fmt.Println(reflect.TypeOf(v3),v3)

}
